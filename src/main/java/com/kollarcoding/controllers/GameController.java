package com.kollarcoding.controllers;

import java.util.ArrayList;
import java.util.List;

import org.springframework.http.HttpStatus;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.server.ResponseStatusException;

import com.kollarcoding.models.Game;
import com.kollarcoding.services.Turn;
import com.kollarcoding.services.UnoGameAPI;

@RestController
@CrossOrigin(maxAge = 3600)
public class GameController {

	@PostMapping("/games")
	Turn postGame(@RequestBody Game game) {

		System.out.println(game);
		Turn start = null;
		UnoGameAPI gameAPI = UnoGameAPI.getGame(game.getGameID()); // initialize API to object and retrieve gameID from postman
																	 
		start = gameAPI.getTurn();
		return start;
		// Use the UnoGameAPI to
		// 1. Return the current game turn of an existing game.
		// 2. Or create a new game and return the first turn.
		// 3. Post should not advance the game
	}

	@GetMapping("/games")
	List<Game> getGames() {

		String[] names = UnoGameAPI.getGameKeys();

		List<Game> games = new ArrayList<>(); // Create arraylist of games generated by POST method
		for (String name : names) {
			games.add(new Game(name));
		}

		return games;
		// Use the UnoGameAPI to
		// 1. Get all existing game names
		// 2. This requires a new method in the UnoGameAPI
	}

	@PutMapping("/games")
	Turn getTurn(@RequestBody Game game) {

		
			UnoGameAPI gameAPI = UnoGameAPI.getGame(game.getGameID());
			
			gameAPI.nextTurn();
			Turn turn = gameAPI.getTurn();
			return turn;
	

		// Use the UnoGameAPI to
		// 1. Get a game turn for the given game key (name).
		// 2. When the game is over, keep returning the last turn.
		// 3. Do not create a game if the game key is unknown
		// 4. Instead, when game key is not known:
	}
}
	
//	@DeleteMapping("/games")
//	Game deleteGame(@RequestBody Game game) {
//		System.out.println("Deleting " + game.getGameID());
//		UnoGameAPI gameAPI = UnoGameAPI.deleteGame(game.getGameID());
//		
//		if (gameAPI != null) {
//			System.out.println("success");
//			return new Game(game.getGameID());
//		}
//		System.out.println("failure");
//		
//	}
//}
